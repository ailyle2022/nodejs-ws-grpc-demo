/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.3
 * source: src/proto/gateway.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gateway {
  export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            username?: string;
            password?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("username" in data && data.username != undefined) {
          this.username = data.username;
        }
        if ("password" in data && data.password != undefined) {
          this.password = data.password;
        }
      }
    }
    get username() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get password() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      username?: string;
      password?: string;
    }): LoginRequest {
      const message = new LoginRequest({});
      if (data.username != null) {
        message.username = data.username;
      }
      if (data.password != null) {
        message.password = data.password;
      }
      return message;
    }
    toObject() {
      const data: {
        username?: string;
        password?: string;
      } = {};
      if (this.username != null) {
        data.username = this.username;
      }
      if (this.password != null) {
        data.password = this.password;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.username.length) writer.writeString(1, this.username);
      if (this.password.length) writer.writeString(2, this.password);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new LoginRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.username = reader.readString();
            break;
          case 2:
            message.password = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
      return LoginRequest.deserialize(bytes);
    }
  }
  export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            success?: boolean;
            message?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("success" in data && data.success != undefined) {
          this.success = data.success;
        }
        if ("message" in data && data.message != undefined) {
          this.message = data.message;
        }
      }
    }
    get success() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    get message() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      success?: boolean;
      message?: string;
    }): LoginResponse {
      const message = new LoginResponse({});
      if (data.success != null) {
        message.success = data.success;
      }
      if (data.message != null) {
        message.message = data.message;
      }
      return message;
    }
    toObject() {
      const data: {
        success?: boolean;
        message?: string;
      } = {};
      if (this.success != null) {
        data.success = this.success;
      }
      if (this.message != null) {
        data.message = this.message;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.success != false) writer.writeBool(1, this.success);
      if (this.message.length) writer.writeString(2, this.message);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new LoginResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.success = reader.readBool();
            break;
          case 2:
            message.message = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
      return LoginResponse.deserialize(bytes);
    }
  }
  export class LogoutRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            username?: string;
            password?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("username" in data && data.username != undefined) {
          this.username = data.username;
        }
        if ("password" in data && data.password != undefined) {
          this.password = data.password;
        }
      }
    }
    get username() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get password() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      username?: string;
      password?: string;
    }): LogoutRequest {
      const message = new LogoutRequest({});
      if (data.username != null) {
        message.username = data.username;
      }
      if (data.password != null) {
        message.password = data.password;
      }
      return message;
    }
    toObject() {
      const data: {
        username?: string;
        password?: string;
      } = {};
      if (this.username != null) {
        data.username = this.username;
      }
      if (this.password != null) {
        data.password = this.password;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.username.length) writer.writeString(1, this.username);
      if (this.password.length) writer.writeString(2, this.password);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new LogoutRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.username = reader.readString();
            break;
          case 2:
            message.password = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LogoutRequest {
      return LogoutRequest.deserialize(bytes);
    }
  }
  export class LogoutResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            success?: boolean;
            message?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("success" in data && data.success != undefined) {
          this.success = data.success;
        }
        if ("message" in data && data.message != undefined) {
          this.message = data.message;
        }
      }
    }
    get success() {
      return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
      pb_1.Message.setField(this, 1, value);
    }
    get message() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      success?: boolean;
      message?: string;
    }): LogoutResponse {
      const message = new LogoutResponse({});
      if (data.success != null) {
        message.success = data.success;
      }
      if (data.message != null) {
        message.message = data.message;
      }
      return message;
    }
    toObject() {
      const data: {
        success?: boolean;
        message?: string;
      } = {};
      if (this.success != null) {
        data.success = this.success;
      }
      if (this.message != null) {
        data.message = this.message;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.success != false) writer.writeBool(1, this.success);
      if (this.message.length) writer.writeString(2, this.message);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new LogoutResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.success = reader.readBool();
            break;
          case 2:
            message.message = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LogoutResponse {
      return LogoutResponse.deserialize(bytes);
    }
  }
  export class Request extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            message?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("message" in data && data.message != undefined) {
          this.message = data.message;
        }
      }
    }
    get message() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { message?: string }): Request {
      const message = new Request({});
      if (data.message != null) {
        message.message = data.message;
      }
      return message;
    }
    toObject() {
      const data: {
        message?: string;
      } = {};
      if (this.message != null) {
        data.message = this.message;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.message.length) writer.writeString(1, this.message);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Request();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.message = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Request {
      return Request.deserialize(bytes);
    }
  }
  export class Response extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            message?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("message" in data && data.message != undefined) {
          this.message = data.message;
        }
      }
    }
    get message() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { message?: string }): Response {
      const message = new Response({});
      if (data.message != null) {
        message.message = data.message;
      }
      return message;
    }
    toObject() {
      const data: {
        message?: string;
      } = {};
      if (this.message != null) {
        data.message = this.message;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.message.length) writer.writeString(1, this.message);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Response();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.message = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Response {
      return Response.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedGatewayServiceService {
    static definition = {
      Login: {
        path: "/gateway.GatewayService/Login",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: LoginRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          LoginRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: LoginResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          LoginResponse.deserialize(new Uint8Array(bytes)),
      },
      Logout: {
        path: "/gateway.GatewayService/Logout",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: LogoutRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          LogoutRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: LogoutResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          LogoutResponse.deserialize(new Uint8Array(bytes)),
      },
      Streamcall: {
        path: "/gateway.GatewayService/Streamcall",
        requestStream: true,
        responseStream: true,
        requestSerialize: (message: Request) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          Request.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: Response) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          Response.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Login(
      call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>,
      callback: grpc_1.sendUnaryData<LoginResponse>,
    ): void;
    abstract Logout(
      call: grpc_1.ServerUnaryCall<LogoutRequest, LogoutResponse>,
      callback: grpc_1.sendUnaryData<LogoutResponse>,
    ): void;
    abstract Streamcall(
      call: grpc_1.ServerDuplexStream<Request, Response>,
    ): void;
  }
  export class GatewayServiceClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedGatewayServiceService.definition,
    "GatewayService",
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (
      message: LoginRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<LoginResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>,
      callback?: grpc_1.requestCallback<LoginResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Login(message, metadata, options, callback);
    };
    Logout: GrpcUnaryServiceInterface<LogoutRequest, LogoutResponse> = (
      message: LogoutRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<LogoutResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<LogoutResponse>,
      callback?: grpc_1.requestCallback<LogoutResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Logout(message, metadata, options, callback);
    };
    Streamcall: GrpcChunkServiceInterface<Request, Response> = (
      metadata?: grpc_1.Metadata | grpc_1.CallOptions,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<Request, Response> => {
      return super.Streamcall(metadata, options);
    };
  }
}
